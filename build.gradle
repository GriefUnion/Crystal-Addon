plugins {
    id "fabric-loom" version "1.4-SNAPSHOT"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

base {
    archivesName = project.archives_base_name
}

version = project.mod_version
group = project.maven_group

repositories {
    maven {
        name = "Meteor Dev Releases"
        url = "https://maven.meteordev.org/releases"
    }
    maven {
        name = "Meteor Dev Snapshots"
        url = "https://maven.meteordev.org/snapshots"
    }
    maven { url "https://maven.seedfinding.com/" }
    maven { url "https://maven-snapshots.seedfinding.com/" }
    maven { url 'https://jitpack.io' }
    maven { url = "https://api.modrinth.com/maven" }
   // maven { url = "https://minecraft.guntram.de/maven" }
    maven { url "https://maven.shedaniel.me/" }
    maven { url "https://maven.terraformersmc.com/releases" }
    mavenCentral()
}


configurations {
    extraLibs
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"

    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "baritone:fabric:${project.minecraft_version}-SNAPSHOT"
    modImplementation "meteordevelopment:meteor-client:${project.meteor_version}-SNAPSHOT"
    modImplementation "maven.modrinth:midnightlib:${project.midnightlib_version}"
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    implementation(include("com.opencsv:opencsv:5.8"))

    include "maven.modrinth:midnightlib:${project.midnightlib_version}"
    implementation (include('com.github.19MisterX98.SeedcrackerX:seedcrackerx-api:2.10.1')) {transitive = false}

    extraLibs('com.seedfinding:mc_math:ffd2edcfcc0d18147549c88cc7d8ec6cf21b5b91') { transitive = false }
    extraLibs('com.seedfinding:mc_seed:1ead6fcefe7e8de4b3d60cd6c4e993f1e8f33409') { transitive = false }
    extraLibs('com.seedfinding:mc_core:d64d5f90be66300da41ef58f4f1736db2499784f') { transitive = false }
    extraLibs('com.seedfinding:mc_noise:7e3ba65e181796c4a2a1c8881d840b2254b92962') { transitive = false }
    extraLibs('com.seedfinding:mc_biome:41a42cb9019a552598f12089059538853e18ec78') { transitive = false }
    extraLibs('com.seedfinding:mc_terrain:b4246cbd5880c4f8745ccb90e1b102bde3448126') { transitive = false }
    extraLibs('com.seedfinding:mc_feature:919b7e513cc1e87e029a9cd703fc4e2dc8686229') { transitive = false }

    configurations.implementation.extendsFrom(configurations.extraLibs)
}

loom {
    accessWidenerPath = file("src/main/resources/crystal.accesswidener")
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
            "mc_version": project.minecraft_version
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

tasks.withType(Jar).configureEach {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
}